// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using hahn.Infrastructure.Presistence;

#nullable disable

namespace hahn.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250824045418_Notification")]
    partial class Notification
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("hahn.Domain.Entities.Buyer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("bio")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("brthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("joinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("mySource")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Buyers");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("notifiedId")
                        .HasColumnType("int");

                    b.Property<int?>("notifierId")
                        .HasColumnType("int");

                    b.Property<bool>("seen")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("notifiedId");

                    b.HasIndex("notifierId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("addedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("buyerId")
                        .HasColumnType("int");

                    b.Property<int>("productId")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("state")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("buyerId");

                    b.HasIndex("productId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("addedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("category")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("reviews")
                        .HasColumnType("int");

                    b.Property<int>("sellerId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("sellerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Seller", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("facebook")
                        .HasColumnType("longtext");

                    b.Property<string>("field")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("hasLocal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("instagram")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("joinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("mySource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<string>("personalSite")
                        .HasColumnType("longtext");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("shopLogo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("shopName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("shopeDescription")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("hahn.Domain.Entities.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("AuthCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("hashedPpassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("joinedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("photo")
                        .HasColumnType("longtext");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Buyer", b =>
                {
                    b.HasOne("hahn.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("hahn.Domain.ValueObject.Adress", "adress", b1 =>
                        {
                            b1.Property<int>("Buyerid")
                                .HasColumnType("int");

                            b1.Property<string>("adress")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("city")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("Buyerid");

                            b1.ToTable("Buyers");

                            b1.WithOwner()
                                .HasForeignKey("Buyerid");
                        });

                    b.Navigation("User");

                    b.Navigation("adress")
                        .IsRequired();
                });

            modelBuilder.Entity("hahn.Domain.Entities.Notification", b =>
                {
                    b.HasOne("hahn.Domain.Entities.User", "Notified")
                        .WithMany()
                        .HasForeignKey("notifiedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hahn.Domain.Entities.User", "Notifier")
                        .WithMany()
                        .HasForeignKey("notifierId");

                    b.Navigation("Notified");

                    b.Navigation("Notifier");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Order", b =>
                {
                    b.HasOne("hahn.Domain.Entities.Buyer", "Buyer")
                        .WithMany()
                        .HasForeignKey("buyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("hahn.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Product", b =>
                {
                    b.HasOne("hahn.Domain.Entities.Seller", "User")
                        .WithMany()
                        .HasForeignKey("sellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("hahn.Domain.Entities.Seller", b =>
                {
                    b.HasOne("hahn.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("hahn.Domain.ValueObject.Adress", "adress", b1 =>
                        {
                            b1.Property<int>("Sellerid")
                                .HasColumnType("int");

                            b1.Property<string>("adress")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("city")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("Sellerid");

                            b1.ToTable("Sellers");

                            b1.WithOwner()
                                .HasForeignKey("Sellerid");
                        });

                    b.OwnsOne("hahn.Domain.ValueObject.Adress", "localAdress", b1 =>
                        {
                            b1.Property<int>("Sellerid")
                                .HasColumnType("int");

                            b1.Property<string>("adress")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("city")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("country")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("Sellerid");

                            b1.ToTable("Sellers");

                            b1.WithOwner()
                                .HasForeignKey("Sellerid");
                        });

                    b.Navigation("User");

                    b.Navigation("adress")
                        .IsRequired();

                    b.Navigation("localAdress")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
